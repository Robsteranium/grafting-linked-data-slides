Grafting Linked Data (what a billion rows taught us about pipelines)

Robin is a freelance developer and economist. He worked with Swirrl to create Grafter, a clojure library for turning spreadsheets into linked-data. In this talk he will share some tips for writing legible and efficient pipelines.



He will share some lessons from writing pipelines to build linked-data 

talk about Grafter, a data transformation library written in clojure.  Swirrl to prepare data for their PublishMyData platform.

How we grew a simple DSL to handle 


Lessons in Data Processing From A Billion Row Pipeline


Benefits: write neater code (learn how to use thread macro), use less memory (lazy seq/ head holding/ gc tuning)
Story: started with dsl idea/ began doing lazy stuff/ worked ok until hit big stuff
3's
curiosity: secrets of a billion row pipeline
concern: how not to handle a billion rows, how to run out of memory
3 lessons from a billion rows

promise benefits/ story
Learn the secrets of a billion row pipeline
Clojure after a billion rows
How a billion rows makes
Lessons from a billion rows
One Billion Rows


Don't Hold Onto The Head
and other lessons learned making a billion quads
How to manufacture a billion quads without setting your processor on fire
Grafter is a library for producing linked data (RDF), typically from spreadsheets. 
After a brief introduction to linked-data and grafter we will explore 
- the beauty of threading
- don't hold onto the head
and then go on to explore several topics that might be useful


Grafter

Linked Data Manufacturing

- what is rdf?
  graph representation, ?s ?p ?o ?g, no metadata/data distinction, labels

- example pipeline
  csv, transformations, rdf template, output

- threading macro
  alternate forms, nice metaphor for transformation, no forks, first vs last

- lazy sequences
  can be infinite etc, store data for getting to next step

- hold onto the head
  
- too much laziness

- garbage collection
  gc profiles, run time comparison, use g1


https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/toc.html

http://stackoverflow.com/questions/2214258/holding-onto-the-head-of-a-sequence
http://clojure.org/reference/lazy#_don_t_hang_onto_your_head


explain rdf with characters/plot from labyrinth
lazy sequence -->
holding onto the head --> fireys
garbage collection --> junk lady

