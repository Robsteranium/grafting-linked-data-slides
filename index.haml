!!!
%html(lang="en")
  %head
    %meta(content="text/html; charset=UTF-8" http-equiv="Content-Type")/
    %title One Billion Rows
    %meta(charset="utf-8")/
    %meta(content="ie=edge" http-equiv="x-ua-compatible")/
    %meta(content="width=device-width, initial-scale=1" name="viewport")/
    %link(href="node_modules/shower-material/styles/screen-16x10.css" rel="stylesheet")/
    %link(href="css/syntax-highlighting.css" rel="stylesheet")/
  %body.shower.list
    %header.caption
      %h1 One Billion Rows
      %p Robin Gower, Infonomics
    %section#cover.slide
      %h2 One Billion Rows
      %p
        %a(href="http://infonomics.ltd.uk") Robin Gower
      %img.cover(alt="" src="pictures/cover.jpg")/
      /
        To apply styles to the certain slides
        set slide ID to get needed elements
      :css
        #cover h2 {
        	margin:30px 0 0;
        	color:#FFF;
        	text-align:center;
        	font-size:70px;
        	}
        #cover p {
        	margin:10px 0 0;
        	text-align:center;
        	color:#FFF;
        	font-style:italic;
        	font-size:20px;
        	}
        #cover p a {
        	color:#FFF;
          }
    %section.slide
      %h2 Getting to a billion rows...
      %ol
        %li What is linked-data?
        %li A grafter pipeline
        %li The threading macro
        %li Lazy sequences
        %li Holding onto the head
        %li Too much laziness
        %li Garbage collection
      -#%p.note Shower ['ʃəuə] noun. A person or thing that shows.
    %section.slide
      %h2 What is linked-data?
      %ul
        %li Graph-based data model
        %li Everything is a URI
        %li URIs are URLs (dereference them to get stuff)
        %li Multiple Serialisations (e.g. turtle)
        %li SPARQL query language
    %section.slide
      %img.cover(alt="Bob, Alice and the Mona Lisa" src="pictures/example-graph.jpg")
    %section.slide
      %h2 Triples: Subject-Predicate-Object
      %p
        :pre
          <code class="nohighlight">
            person:Bob a thing:Person ;
              :friendOf person:Alice ;
              :bornOn "1990-07-04"^^xsd:date ;
              :interestedIn picture:TheMonaLisa .
                
            picture:TheMonaLisa :createdBy person:LeonardoDaVinci .
          </code>
    %section.slide
      %h2 SPARQL
      %p
        :pre
          <code class="sql">
            SELECT * WHERE {
              ?s ?p ?o .
            }
          </code>
        :pre
          <code class="SQL">
            SELECT * WHERE {
              ?s a thing:Person .
            }
          </code>
    %section.slide
      %img.cover(alt="Grafter logo" src="pictures/grafter-logo.png")
    %section.slide
      %h2 CSV source
      %p
        :pre
          friend-a, friend-b
          Alice, Bob
          Alice, Carol
          Dan, Eve
    %section.slide
      %h2 Pipeline
    %section.slide
      %h2 The Threading Macro
      %p
        :pre
          <code class="clojure">
            (defn my-pipeline [input]
              (write-result
                (process-contents
                  (read-input input)
                  capitalise)
                "output.txt"))

            (defn my-threaded-pipeline [input]
              (-> (read-input input)
                  (process-contents capitalise)
                  (write-result "output.txt)))
          </code>
    %section.slide
      %h2 Thread Last and the Seq Abstraction
      %p
        :pre
          <code class="clojure">
          </code>
    %section.slide
      %h2 Lazy Sequences
      %p Can be infinite, store data for getting to the next step
    %section.slide
      %h2 Holding onto the Head
      %p examples...
    %section.slide
      %h2 Too Lazy
    %section.slide
      %h2 Garbage Collection
  .progress
  %script(src="node_modules/shower-core/shower.min.js")
